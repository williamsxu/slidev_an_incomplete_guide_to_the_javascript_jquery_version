'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const path = require('path');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

const path__default = /*#__PURE__*/_interopDefaultLegacy(path);

const sep = "/";
const delimiter = ":";
const win32 = path__default["default"].win32;
const posix = path__default["default"].posix;
const extname = function(p) {
  return path__default["default"].posix.extname(normalizeWindowsPath(p));
};
const normalize = function(p) {
  return path__default["default"].posix.normalize(normalizeWindowsPath(p));
};
const join = function(...args) {
  return path__default["default"].posix.join.apply(path__default["default"].posix.join, args.map((arg) => normalizeWindowsPath(arg)));
};
const relative = function(from, to) {
  return path__default["default"].posix.relative(normalizeWindowsPath(from), normalizeWindowsPath(to));
};
const dirname = function(p) {
  return path__default["default"].posix.dirname(normalizeWindowsPath(p));
};
const resolve = function(...args) {
  return path__default["default"].posix.resolve.apply(path__default["default"].posix.resolve, args.map((arg) => normalizeWindowsPath(arg)));
};
const format = function(p) {
  return normalizeWindowsPath(path__default["default"].posix.format(p));
};
const basename = function(p, ext) {
  return path__default["default"].posix.basename(normalizeWindowsPath(p), ext);
};
const parse = function(p) {
  return path__default["default"].posix.parse(normalizeWindowsPath(p));
};
const toNamespacedPath = function(p) {
  return p;
};
const _IS_ABSOLUTE_RE = /^\/|^\\|^[a-zA-Z]:[/\\]/;
const isAbsolute = function(p) {
  return _IS_ABSOLUTE_RE.test(p);
};
function normalizeWindowsPath(input = "") {
  if (!input.includes("\\")) {
    return input;
  }
  return input.replace(/\\/g, "/");
}
const index = {
  win32,
  posix,
  sep,
  delimiter,
  resolve,
  normalize,
  isAbsolute,
  join,
  relative,
  toNamespacedPath,
  dirname,
  basename,
  extname,
  format,
  parse
};

exports.basename = basename;
exports["default"] = index;
exports.delimiter = delimiter;
exports.dirname = dirname;
exports.extname = extname;
exports.format = format;
exports.isAbsolute = isAbsolute;
exports.join = join;
exports.normalize = normalize;
exports.normalizeWindowsPath = normalizeWindowsPath;
exports.parse = parse;
exports.posix = posix;
exports.relative = relative;
exports.resolve = resolve;
exports.sep = sep;
exports.toNamespacedPath = toNamespacedPath;
exports.win32 = win32;
