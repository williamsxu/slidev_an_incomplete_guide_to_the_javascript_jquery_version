import {
  getBuiltinIcon
} from "./chunk-G56EZ2RR.mjs";
import {
  camelToKebab
} from "./chunk-BXMXPZGR.mjs";
import "./chunk-V3LEQVIA.mjs";

// src/resolver.ts
import { toArray, uniq } from "@antfu/utils";
import Data from "@iconify/json";
function ComponentsResolver(options = {}) {
  var _a;
  const {
    prefix: rawPrefix = (_a = options.componentPrefix) != null ? _a : "i",
    enabledCollections = Object.keys(Data.collections()),
    alias = {},
    customCollections = [],
    extension
  } = options;
  const prefix = rawPrefix ? `${camelToKebab(rawPrefix)}-` : "";
  const ext = extension ? extension.startsWith(".") ? extension : `.${extension}` : "";
  const collections = uniq([
    ...toArray(enabledCollections),
    ...toArray(customCollections),
    ...toArray(Object.keys(alias))
  ]);
  collections.sort((a, b) => b.length - a.length);
  return (name) => {
    const kebab = camelToKebab(name);
    if (!kebab.startsWith(prefix))
      return;
    const slice = kebab.slice(prefix.length);
    const collection = collections.find((i) => slice.startsWith(`${i}-`)) || collections.find((i) => slice.startsWith(i));
    if (!collection)
      return;
    let icon = slice.slice(collection.length);
    if (icon[0] === "-")
      icon = icon.slice(1);
    if (!icon)
      return;
    const resolvedCollection = alias[collection] || collection;
    if (!customCollections.includes(resolvedCollection) && !getBuiltinIcon(resolvedCollection, icon))
      return;
    return `~icons/${resolvedCollection}/${icon}${ext}`;
  };
}
export {
  ComponentsResolver as default
};
