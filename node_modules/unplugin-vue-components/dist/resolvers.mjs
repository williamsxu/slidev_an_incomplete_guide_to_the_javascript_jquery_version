import {
  LibraryResolver,
  camelCase,
  getPkgVersion,
  kebabCase,
  pascalCase,
  resolveImportPath,
  tryLoadVeturTags
} from "./chunk-CO5G4WEO.mjs";
import {
  __commonJS,
  __require,
  __toModule
} from "./chunk-PJJOEYQ7.mjs";

// node_modules/.pnpm/compare-versions@3.6.0/node_modules/compare-versions/index.js
var require_compare_versions = __commonJS({
  "node_modules/.pnpm/compare-versions@3.6.0/node_modules/compare-versions/index.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define([], factory);
      } else if (typeof exports === "object") {
        module.exports = factory();
      } else {
        root.compareVersions = factory();
      }
    })(exports, function() {
      var semver = /^v?(?:\d+)(\.(?:[x*]|\d+)(\.(?:[x*]|\d+)(\.(?:[x*]|\d+))?(?:-[\da-z\-]+(?:\.[\da-z\-]+)*)?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i;
      function indexOrEnd(str, q) {
        return str.indexOf(q) === -1 ? str.length : str.indexOf(q);
      }
      function split(v) {
        var c = v.replace(/^v/, "").replace(/\+.*$/, "");
        var patchIndex = indexOrEnd(c, "-");
        var arr = c.substring(0, patchIndex).split(".");
        arr.push(c.substring(patchIndex + 1));
        return arr;
      }
      function tryParse(v) {
        return isNaN(Number(v)) ? v : Number(v);
      }
      function validate(version) {
        if (typeof version !== "string") {
          throw new TypeError("Invalid argument expected string");
        }
        if (!semver.test(version)) {
          throw new Error("Invalid argument not valid semver ('" + version + "' received)");
        }
      }
      function compareVersions2(v1, v2) {
        [v1, v2].forEach(validate);
        var s1 = split(v1);
        var s2 = split(v2);
        for (var i = 0; i < Math.max(s1.length - 1, s2.length - 1); i++) {
          var n1 = parseInt(s1[i] || 0, 10);
          var n2 = parseInt(s2[i] || 0, 10);
          if (n1 > n2)
            return 1;
          if (n2 > n1)
            return -1;
        }
        var sp1 = s1[s1.length - 1];
        var sp2 = s2[s2.length - 1];
        if (sp1 && sp2) {
          var p1 = sp1.split(".").map(tryParse);
          var p2 = sp2.split(".").map(tryParse);
          for (i = 0; i < Math.max(p1.length, p2.length); i++) {
            if (p1[i] === void 0 || typeof p2[i] === "string" && typeof p1[i] === "number")
              return -1;
            if (p2[i] === void 0 || typeof p1[i] === "string" && typeof p2[i] === "number")
              return 1;
            if (p1[i] > p2[i])
              return 1;
            if (p2[i] > p1[i])
              return -1;
          }
        } else if (sp1 || sp2) {
          return sp1 ? -1 : 1;
        }
        return 0;
      }
      ;
      var allowedOperators = [
        ">",
        ">=",
        "=",
        "<",
        "<="
      ];
      var operatorResMap = {
        ">": [1],
        ">=": [0, 1],
        "=": [0],
        "<=": [-1, 0],
        "<": [-1]
      };
      function validateOperator(op) {
        if (typeof op !== "string") {
          throw new TypeError("Invalid operator type, expected string but got " + typeof op);
        }
        if (allowedOperators.indexOf(op) === -1) {
          throw new TypeError("Invalid operator, expected one of " + allowedOperators.join("|"));
        }
      }
      compareVersions2.validate = function(version) {
        return typeof version === "string" && semver.test(version);
      };
      compareVersions2.compare = function(v1, v2, operator) {
        validateOperator(operator);
        var res = compareVersions2(v1, v2);
        return operatorResMap[operator].indexOf(res) > -1;
      };
      return compareVersions2;
    });
  }
});

// src/core/resolvers/antdv.ts
var matchComponents = [
  {
    pattern: /^Avatar/,
    styleDir: "avatar"
  },
  {
    pattern: /^AutoComplete/,
    styleDir: "auto-complete"
  },
  {
    pattern: /^Anchor/,
    styleDir: "anchor"
  },
  {
    pattern: /^Badge/,
    styleDir: "badge"
  },
  {
    pattern: /^Breadcrumb/,
    styleDir: "breadcrumb"
  },
  {
    pattern: /^Button/,
    styleDir: "button"
  },
  {
    pattern: /^Checkbox/,
    styleDir: "checkbox"
  },
  {
    pattern: /^Card/,
    styleDir: "card"
  },
  {
    pattern: /^Collapse/,
    styleDir: "collapse"
  },
  {
    pattern: /^Descriptions/,
    styleDir: "descriptions"
  },
  {
    pattern: /^RangePicker|^WeekPicker|^MonthPicker/,
    styleDir: "date-picker"
  },
  {
    pattern: /^Dropdown/,
    styleDir: "dropdown"
  },
  {
    pattern: /^Form/,
    styleDir: "form"
  },
  {
    pattern: /^InputNumber/,
    styleDir: "input-number"
  },
  {
    pattern: /^Input|^Textarea/,
    styleDir: "input"
  },
  {
    pattern: /^Statistic/,
    styleDir: "statistic"
  },
  {
    pattern: /^CheckableTag/,
    styleDir: "tag"
  },
  {
    pattern: /^Layout/,
    styleDir: "layout"
  },
  {
    pattern: /^Menu|^SubMenu/,
    styleDir: "menu"
  },
  {
    pattern: /^Table/,
    styleDir: "table"
  },
  {
    pattern: /^Radio/,
    styleDir: "radio"
  },
  {
    pattern: /^Image/,
    styleDir: "image"
  },
  {
    pattern: /^List/,
    styleDir: "list"
  },
  {
    pattern: /^Tab/,
    styleDir: "tabs"
  },
  {
    pattern: /^Mentions/,
    styleDir: "mentions"
  },
  {
    pattern: /^Step/,
    styleDir: "steps"
  },
  {
    pattern: /^Skeleton/,
    styleDir: "skeleton"
  },
  {
    pattern: /^Select/,
    styleDir: "select"
  },
  {
    pattern: /^TreeSelect/,
    styleDir: "tree-select"
  },
  {
    pattern: /^Tree|^DirectoryTree/,
    styleDir: "tree"
  },
  {
    pattern: /^Typography/,
    styleDir: "typography"
  },
  {
    pattern: /^Timeline/,
    styleDir: "timeline"
  },
  {
    pattern: /^Upload/,
    styleDir: "upload"
  }
];
function getStyleDir(compName) {
  let styleDir;
  const total = matchComponents.length;
  for (let i = 0; i < total; i++) {
    const matcher = matchComponents[i];
    if (compName.match(matcher.pattern)) {
      styleDir = matcher.styleDir;
      break;
    }
  }
  if (!styleDir)
    styleDir = kebabCase(compName);
  return styleDir;
}
function getSideEffects(compName, options) {
  const {
    importStyle = true,
    importLess = false
  } = options;
  if (!importStyle)
    return;
  if (importStyle === "less" || importLess) {
    const styleDir = getStyleDir(compName);
    return `ant-design-vue/es/${styleDir}/style`;
  } else {
    const styleDir = getStyleDir(compName);
    return `ant-design-vue/es/${styleDir}/style/css`;
  }
}
function AntDesignVueResolver(options = {}) {
  return (name) => {
    var _a;
    if (options.resolveIcons && name.match(/(Outlined|Filled|TwoTone)$/)) {
      return {
        importName: name,
        path: "@ant-design/icons-vue"
      };
    }
    if (name.match(/^A[A-Z]/) && !((_a = options == null ? void 0 : options.exclude) == null ? void 0 : _a.includes(name))) {
      const importName = name.slice(1);
      return {
        importName,
        path: "ant-design-vue/es",
        sideEffects: getSideEffects(importName, options)
      };
    }
  };
}

// src/core/resolvers/element-plus.ts
var import_compare_versions = __toModule(require_compare_versions());
function getSideEffectsLegacy(partialName, options) {
  const { importStyle = "css" } = options;
  if (!importStyle)
    return;
  if (importStyle === "sass") {
    return [
      "element-plus/packages/theme-chalk/src/base.scss",
      `element-plus/packages/theme-chalk/src/${partialName}.scss`
    ];
  } else if (importStyle === true || importStyle === "css") {
    return [
      "element-plus/lib/theme-chalk/base.css",
      `element-plus/lib/theme-chalk/el-${partialName}.css`
    ];
  }
}
function getSideEffects2(dirName, options) {
  const { importStyle = "css" } = options;
  if (importStyle === "sass")
    return `element-plus/es/components/${dirName}/style`;
  else if (importStyle === true || importStyle === "css")
    return `element-plus/es/components/${dirName}/style/css`;
}
function ElementPlusResolver(options = {}) {
  return (name) => {
    if (name.match(/^El[A-Z]/)) {
      const {
        version = getPkgVersion("element-plus", "1.0.2")
      } = options;
      const partialName = kebabCase(name.slice(2));
      if (import_compare_versions.default.compare(version, "1.1.0-beta.1", ">=")) {
        return {
          importName: name,
          path: "element-plus/es",
          sideEffects: getSideEffects2(partialName, options)
        };
      } else if (import_compare_versions.default.compare(version, "1.0.2-beta.28", ">=")) {
        return {
          path: `element-plus/es/el-${partialName}`,
          sideEffects: getSideEffectsLegacy(partialName, options)
        };
      } else {
        return {
          path: `element-plus/lib/el-${partialName}`,
          sideEffects: getSideEffectsLegacy(partialName, options)
        };
      }
    }
  };
}

// src/core/resolvers/element-ui.ts
function getSideEffects3(partialName, options) {
  const { importStyle = "css" } = options;
  if (!importStyle)
    return;
  if (importStyle === "sass") {
    return [
      "element-ui/packages/theme-chalk/src/base.scss",
      `element-ui/packages/theme-chalk/src/${partialName}.scss`
    ];
  } else {
    return [
      "element-ui/lib/theme-chalk/base.css",
      `element-ui/lib/theme-chalk/${partialName}.css`
    ];
  }
}
function ElementUiResolver(options = {}) {
  return (name) => {
    if (name.startsWith("El")) {
      const compName = name.slice(2);
      const partialName = kebabCase(compName);
      return {
        path: `element-ui/lib/${partialName}`,
        sideEffects: getSideEffects3(partialName, options)
      };
    }
  };
}

// src/core/resolvers/headless-ui.ts
var components = [
  "Dialog",
  "DialogDescription",
  "DialogOverlay",
  "DialogTitle",
  "Disclosure",
  "DisclosureButton",
  "DisclosurePanel",
  "FocusTrap",
  "Listbox",
  "ListboxButton",
  "ListboxLabel",
  "ListboxOption",
  "ListboxOptions",
  "Menu",
  "MenuButton",
  "MenuItem",
  "MenuItems",
  "Popover",
  "PopoverButton",
  "PopoverGroup",
  "PopoverOverlay",
  "PopoverPanel",
  "Portal",
  "PortalGroup",
  "RadioGroup",
  "RadioGroupDescription",
  "RadioGroupLabel",
  "RadioGroupOption",
  "Switch",
  "SwitchDescription",
  "SwitchGroup",
  "SwitchLabel",
  "TransitionChild",
  "TransitionRoot",
  "TabGroup",
  "TabList",
  "Tab",
  "TabPanels",
  "TabPanel"
];
function HeadlessUiResolver() {
  return (name) => {
    if (components.includes(name))
      return { importName: name, path: "@headlessui/vue" };
  };
}

// src/core/resolvers/idux.ts
var cdkNames = [
  "portal",
  "resizable",
  "virtual-list"
];
var kebabCaseDirnames = [
  "virtual-list",
  "auto-complete",
  "back-top",
  "date-picker",
  "input-number",
  "time-picker",
  "tree-select"
];
function IduxResolver(options = {}) {
  return (name) => {
    if (name.match(/^Ix[A-Z]/)) {
      const { importStyle } = options;
      const compName = name.slice(2);
      const kebabCaseName = kebabCase(compName);
      const isCdk = cdkNames.includes(kebabCaseName);
      const packageName = isCdk ? "cdk" : "components";
      const dirname = getDirname(kebabCaseName);
      const path = `@idux/${packageName}/${dirname}`;
      const sideEffects = isCdk || !importStyle ? void 0 : `${path}/style/${importStyle === "css" ? "css" : "index"}`;
      return { importName: name, path, sideEffects };
    }
  };
}
function getDirname(compName) {
  const dirname = kebabCaseDirnames.find((name) => compName.startsWith(name));
  if (dirname)
    return dirname;
  const [first] = compName.split("-");
  if (first === "row" || first === "col")
    return "grid";
  return first;
}

// src/core/resolvers/naive-ui.ts
function NaiveUiResolver() {
  return (name) => {
    if (name.match(/^N[A-Z]/))
      return { importName: name, path: "naive-ui" };
  };
}

// src/core/resolvers/prime-vue.ts
var components2 = [
  "AutoComplete",
  "Calendar",
  "CascadeSelect",
  "Checkbox",
  "Chips",
  "ColorPicker",
  "Dropdown",
  "Editor",
  "InputMask",
  "InputNumber",
  "InputSwitch",
  "InputText",
  "Knob",
  "Listbox",
  "MultiSelect",
  "Password",
  "RadioButton",
  "Rating",
  "SelectButton",
  "Slider",
  "Textarea",
  "ToggleButton",
  "TreeSelect",
  "TriStateCheckbox",
  "Button",
  "SpeedDial",
  "SplitButton",
  "DataTable",
  "Column",
  "ColumnGroup",
  "DataView",
  "VirtualScroller",
  "FullCalendar",
  "OrderList",
  "OrganizationChart",
  "Paginator",
  "PickList",
  "Timelist",
  "Tree",
  "TreeTable",
  "Accordion",
  "AccordionTab",
  "Card",
  "DeferredContent",
  "Divider",
  "Fieldset",
  "Panel",
  "Splitter",
  "SplitterPanel",
  "ScrollPanel",
  "TabView",
  "TabPanel",
  "Toolbar",
  "ConfirmDialog",
  "ConfirmPopup",
  "Dialog",
  "OverlayPanel",
  "Sidebar",
  "Tooltip",
  "FileUpload",
  "Breadcrumb",
  "ContextMenu",
  "MegaMenu",
  "Menu",
  "Menubar",
  "PanelMenu",
  "Steps",
  "TabMenu",
  "TieredMenu",
  "Dock",
  "Chart",
  "Message",
  "Toast",
  "Carousel",
  "Galleria",
  "Image",
  "Avatar",
  "AvatarGroup",
  "Badge",
  "Chip",
  "BlockUI",
  "Inplace",
  "ScrollTop",
  "Skeleton",
  "ProgressBar",
  "ProgressSpinner",
  "Tag",
  "Terminal",
  "TerminalService"
];
function PrimeVueResolver(options = {}) {
  return (name) => {
    const sideEffects = [];
    if (options.importStyle)
      sideEffects.push("primevue/resources/primevue.min.css");
    if (options.importIcons)
      sideEffects.push("primeicons/primeicons.css");
    if (options.importTheme) {
      sideEffects.push(`primevue/resources/themes/${options.importTheme}/theme.css`);
    }
    if (components2.includes(name)) {
      return {
        path: `primevue/${name.toLowerCase()}/${name}.vue`,
        sideEffects
      };
    }
  };
}

// src/core/resolvers/vant.ts
function VantResolver(options = {}) {
  return (name) => {
    const { importStyle = true } = options;
    if (name.startsWith("Van")) {
      const partialName = name.slice(3);
      return {
        importName: partialName,
        path: "vant/es",
        sideEffects: importStyle ? `vant/es/${kebabCase(partialName)}/style` : void 0
      };
    }
  };
}

// src/core/resolvers/varlet-ui.ts
function VarletUIResolver(options = {}) {
  return (name) => {
    const {
      importStyle = "css",
      importCss = true,
      importLess
    } = options;
    if (name.startsWith("Var")) {
      const partialName = name.slice(3);
      const sideEffects = [];
      if (importStyle || importCss) {
        if (importStyle === "less" || importLess)
          sideEffects.push(`@varlet/ui/es/${kebabCase(partialName)}/style/less.js`);
        else
          sideEffects.push(`@varlet/ui/es/${kebabCase(partialName)}/style`);
      }
      return {
        importName: `_${partialName}Component`,
        path: "@varlet/ui",
        sideEffects
      };
    }
  };
}

// src/core/resolvers/veui.ts
import { join, normalize } from "path";
var VEUI_PACKAGE_NAME = "veui";
var components3;
function VeuiResolver(options) {
  const { alias = VEUI_PACKAGE_NAME } = options;
  if (!components3) {
    try {
      const componentsData = __require(`${alias}/components.json`);
      components3 = new Set(componentsData.map(({ name }) => name));
    } catch (e) {
      throw new Error("[unplugin-vue-components:veui] VEUI is not installed");
    }
  }
  return (name) => {
    if (name.match(/^Veui[A-Z]/)) {
      const componentName = name.slice(4);
      if (!components3.has(componentName))
        return;
      const sideEffects = getSideEffects4(componentName, options);
      return { importName: componentName, path: alias, sideEffects };
    }
  };
}
var formatters = {
  "kebab-case": kebabCase,
  "camelCase": camelCase,
  "PascalCase": pascalCase
};
var peerPaths = new Map();
function assertPeerPath(peerPath) {
  if (!peerPaths.has(peerPath)) {
    try {
      resolveImportPath(peerPath);
      peerPaths.set(peerPath, true);
    } catch (e) {
      peerPaths.set(peerPath, false);
    }
  }
  return peerPaths.get(peerPath);
}
function getSideEffects4(name, {
  alias = VEUI_PACKAGE_NAME,
  modules = [],
  locale = "zh-Hans",
  global = []
}) {
  const localeModules = (locale ? Array.isArray(locale) ? locale : [locale] : []).map((locale2) => `${alias}/locale/${locale2}/${name}.js`);
  const peerModules = modules.map(({
    package: pack,
    path = "components",
    fileName = "{module}.css",
    transform = "kebab-case"
  }) => {
    const peer = transform ? formatters[transform](name) : name;
    const file = fileName.replace(/\$?\{module\}/g, peer);
    return normalize(join(pack, path, file));
  });
  return [...localeModules, ...global, ...peerModules].filter(assertPeerPath);
}

// src/core/resolvers/view-ui.ts
function getSideEffects5(componentName) {
  const sideEffects = [
    "view-design/dist/styles/iview.css",
    "popper.js/dist/umd/popper.js"
  ];
  if (/^Table|^Slider|^Tab/.test(componentName))
    sideEffects.push("element-resize-detector");
  if (/^Date/.test(componentName))
    sideEffects.push("js-calendar");
  return sideEffects;
}
var matchComponents2 = [
  {
    pattern: /^List/,
    compDir: "list"
  }
];
function getCompDir(compName) {
  let compPath;
  const total = matchComponents2.length;
  for (let i = 0; i < total; i++) {
    const matcher = matchComponents2[i];
    if (compName.match(matcher.pattern)) {
      compPath = `${matcher.compDir}/${kebabCase(compName)}.vue`;
      break;
    }
  }
  if (!compPath)
    compPath = kebabCase(compName);
  return compPath;
}
function ViewUiResolver() {
  return (name) => {
    if (name.match(/^I[A-Z]/)) {
      const compName = name.slice(1);
      return {
        path: `view-design/src/components/${getCompDir(compName)}`,
        sideEffects: getSideEffects5(compName)
      };
    }
  };
}

// src/core/resolvers/vuetify.ts
function VuetifyResolver() {
  return (name) => {
    if (name.match(/^V[A-Z]/))
      return { importName: name, path: "vuetify/lib" };
  };
}

// src/core/resolvers/vueuse.ts
var components4;
function VueUseComponentsResolver() {
  return (name) => {
    if (!components4) {
      try {
        const indexesJson = __require("@vueuse/core/indexes.json");
        components4 = indexesJson.functions.filter((i) => i.component && i.name).map(({ name: name2 }) => name2[0].toUpperCase() + name2.slice(1));
      } catch (error) {
        components4 = [];
      }
    }
    if (components4 && components4.includes(name))
      return { importName: name, path: "@vueuse/components" };
  };
}

// src/core/resolvers/quasar.ts
function QuasarResolver() {
  return (name) => {
    let components5 = [];
    try {
      components5 = __require("quasar/dist/transforms/api-list.json");
    } catch (e) {
    }
    if (components5.includes(name)) {
      return { importName: name, path: "quasar" };
    }
  };
}
export {
  AntDesignVueResolver,
  ElementPlusResolver,
  ElementUiResolver,
  HeadlessUiResolver,
  IduxResolver,
  LibraryResolver,
  NaiveUiResolver,
  PrimeVueResolver,
  QuasarResolver,
  VantResolver,
  VarletUIResolver,
  VeuiResolver,
  ViewUiResolver,
  VueUseComponentsResolver,
  VuetifyResolver,
  tryLoadVeturTags
};
