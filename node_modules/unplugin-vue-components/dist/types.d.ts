import { FilterPattern } from '@rollup/pluginutils';
import { TransformResult } from 'unplugin';

interface ImportInfo {
    name?: string;
    importName?: string;
    path: string;
}
declare type SideEffectsInfo = (ImportInfo | string)[] | ImportInfo | string | undefined;
interface ComponentInfo extends ImportInfo {
    sideEffects?: SideEffectsInfo;
}
declare type ComponentResolveResult = string | ComponentInfo;
declare type ComponentResolver = (name: string) => ComponentResolveResult | null | undefined | void;
interface UILibraryOptions {
    name: string;
    prefix?: string;
    entries?: string[];
}
declare type Matcher = (id: string) => boolean | null | undefined;
declare type Transformer = (code: string, id: string, path: string, query: Record<string, string>) => TransformResult | null | Promise<null | TransformResult>;
/**
 * Plugin options.
 */
interface Options {
    /**
     * RegExp or glob to match files to be transformed
     */
    include?: FilterPattern;
    /**
     * RegExp or glob to match files to NOT be transformed
     */
    exclude?: FilterPattern;
    /**
     * Relative paths to the directory to search for components.
     * @default 'src/components'
     */
    dirs?: string | string[];
    /**
     * Valid file extensions for components.
     * @default ['vue']
     */
    extensions?: string | string[];
    /**
     * Glob patterns to match file names to be detected as components.
     *
     * When specified, the `dirs` and `extensions` options will be ignored.
     */
    globs?: string | string[];
    /**
     * Search for subdirectories
     * @default true
     */
    deep?: boolean;
    /**
     * Allow subdirectories as namespace prefix for components
     * @default false
     */
    directoryAsNamespace?: boolean;
    /**
     * Subdirectory paths for ignoring namespace prefixes
     * works when `directoryAsNamespace: true`
     * @default "[]"
     */
    globalNamespaces?: string[];
    /**
     * comp libraries to use auto import
     */
    libraries?: (string | UILibraryOptions)[];
    /**
     * Pass a custom function to resolve the component importing path from the component name.
     *
     * The component names are always in PascalCase
     */
    resolvers?: ComponentResolver | ComponentResolver[];
    /**
     * Apply custom transform over the path for importing
     */
    importPathTransform?: (path: string) => string | undefined;
    /**
     * Transformer to apply
     *
     * @default 'vue3'
     */
    transformer?: 'vue3' | 'vue2';
    /**
     * Generate TypeScript declaration for global components
     *
     * Accept boolean or a path related to project root
     *
     * @see https://github.com/vuejs/vue-next/pull/3399
     * @see https://github.com/johnsoncodehk/volar#using
     * @default true
     */
    dts?: boolean | string;
    /**
     * Do not emit warning on component overriding
     *
     * @default false
     */
    allowOverrides?: boolean;
}
declare type ResolvedOptions = Omit<Required<Options>, 'resolvers' | 'libraries' | 'extensions' | 'dirs' | 'globalComponentsDeclaration'> & {
    resolvers: ComponentResolver[];
    libraries: UILibraryOptions[];
    extensions: string[];
    dirs: string[];
    resolvedDirs: string[];
    globs: string[];
    dts: string | false;
    root: string;
};
declare type ComponentsImportMap = Record<string, string[] | undefined>;

export { ComponentInfo, ComponentResolveResult, ComponentResolver, ComponentsImportMap, ImportInfo, Matcher, Options, ResolvedOptions, SideEffectsInfo, Transformer, UILibraryOptions };
